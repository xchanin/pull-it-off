$background-colors: 
rgba($color: #750e0e, $alpha: 1.0), 
rgba($color: #ee1818, $alpha: 1.0), 
rgba($color: #0e5d75, $alpha: 1.0), 
rgba($color: #3a3cce, $alpha: 1.0), 
rgba($color: #750e4a, $alpha: 1.0), 
rgba($color: #0e7570, $alpha: 1.0), 
rgba($color: #b4da6e, $alpha: 1.0), 
rgba($color: #d4bf44, $alpha: 1.0),
rgba($color: #721313, $alpha: 1.0),
rgba($color: #e70ca5, $alpha: 1.0);

$border-radius: 0.5rem;

.container {
    position: relative;
    max-width: 100%;
    display: grid;
    grid-template-columns: repeat(auto-fill, [col] minmax(300px, 1fr));
    grid-template-rows: [row] minmax(100px, auto);
    margin: 10px;
    grid-auto-flow: dense;
    grid-gap: 10px;
    overflow: hidden;

    .box {
        padding: 20px;
        display: grid;
        place-items: center;
        text-align: center;
        animation: bounceIn 1s ease;
        border-radius: $border-radius;
        overflow: hidden;
        cursor: pointer;
        // set each cell color
        @for $i from 1 through 9 {
            &:nth-of-type(#{$i}) {
               // background-color: nth($background-colors, $i);
        }
    }   

        .content {
            display: grid;
            place-items: center;
            text-align: center;
            width: 100%;
            height: 100%;
            border-radius: $border-radius;
            transition: 0.5s ease;
        }

        .content:hover {
            transform: scale(1.1);
        }

        .content img {
            position: relative;
            max-width: 100px;
            margin-bottom: 10px;
        }
    }

    /*
    * Loop over nest map and assign column and row span sizes
    *
    *@param $key - name of nested map, 
    *              in this case using it like an index
    *
    *@param $value - in this case another map
    */
    // @each $key, $value in  $column-row-map {
    //     $i: index($column-row-map, $key);
    //     .box:nth-child(#{$key}) {
    //         grid-column: span map-get($value, col);
    //         grid-row: span map-get($value, row);
    //     } 
    //  }
}

@media (max-width: 991px) {
    .container {
        grid-template-columns: repeat(auto-fill, minmax(50%, 1fr));
        grid-template-rows: minmax(auto, auto);

        .box {
            grid-column: unset !important;
            grid-row: unset !important;
        }
    }
}

@keyframes bounceIn{
    0%{
      opacity: 0;
      transform: scale(0.3) translate3d(0,0,0);
    }
    50%{
      opacity: 0.9;
      transform: scale(1.20);
    }
    80%{
      opacity: 1;
      transform: scale(0.9);
    }
    100%{
      opacity: 1;
      transform: scale(1) translate3d(0,0,0);
    }
  }